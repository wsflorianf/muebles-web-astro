---
import type { ProductTypes } from '@/types/data'

interface Props {
  product: ProductTypes
  path: string
}

const { product, path } = Astro.props

const url = Astro.url.pathname.split('/')[2]
const baseUrl = import.meta.env.BASE_URL
---

<div class="h-[85vh] max-sm:h-auto p-10 max-sm:p-6 flex max-sm:flex-col-reverse gap-[30px]">
  <div class="flex flex-col w-full h-full flex-[5] max-sm:h-80 gap-2">
  <div
    id='default-carousel'
    class='relative w-full h-full max-sm:h-80 shadow-md border border-gray-200 rounded-xl'
    data-carousel='static max-sm:slide'
  >
    <!-- Carousel wrapper -->
    <div class='relative h-full overflow-hidden rounded-lg'>
      {
        product.images.map((image, index) => {
          return (
            <div
              class='image-conatiner hidden duration-700 ease-in-out bg-white hover: cursor-zoom-in'
              data-carousel-item
            >
              <img
                src={baseUrl + path + image}
                class='absolute block -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 h-full w-auto'
                alt='...'
              />
            </div>
          )
        })
      }
    </div>
    <!-- Slider indicators -->
    <div
      class='absolute z-30 flex -translate-x-1/2 bottom-5 max-sm:bottom-2 left-1/2 space-x-3 rtl:space-x-reverse'
    >
      {
        product.images.map((image, index) => {
          return (
            <button
              type='button'
              class='size-3 max-sm:size-2 rounded-full'
              aria-current='true'
              aria-label={'Imagen ' + (index + 1)}
              data-carousel-slide-to={index}
            />
          )
        })
      }
    </div>
    <!-- Slider controls -->
    <button
      type='button'
      class:list={['absolute -translate-x-1/2 -translate-y-1/2 top-1/2 left-10 max-sm:left-6 z-30 px-4 cursor-pointer group focus:outline-none', product.images.length!==1 || 'hidden']}
      data-carousel-prev
    >
      <span
        class='inline-flex items-center justify-center size-10 max-sm:size-7 rounded-full border border-gray-100 shadow-lg bg-gray-700/60 group-hover:bg-gray-700/90 group-focus:ring-4 group-focus:ring-gray-700/70 group-focus:outline-none'
      >
        <svg
          class='size-4 max-sm:size-3 text-white rtl:rotate-180'
          aria-hidden='true'
          xmlns='http://www.w3.org/2000/svg'
          fill='none'
          viewBox='0 0 6 10'
        >
          <path
            stroke='currentColor'
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M5 1 1 5l4 4'></path>
        </svg>
        <span class='sr-only'>Previous</span>
      </span>
    </button>
    <button
      type='button'
      class:list={['absolute translate-x-1/2 -translate-y-1/2 top-1/2 right-10 max-sm:right-6 z-30 items-center justify-center px-4 cursor-pointer group focus:outline-none',  product.images.length!==1 || 'hidden']}
      data-carousel-next
    >
      <span
        class='inline-flex items-center justify-center size-10 max-sm:size-7 rounded-full border border-gray-100 shadow-lg bg-gray-700/60 group-hover:bg-gray-700/90 group-focus:ring-4 group-focus:ring-gray-700/70 group-focus:outline-none'
      >
        <svg
          class='size-4 max-sm:size-3 text-white rtl:rotate-180'
          aria-hidden='true'
          xmlns='http://www.w3.org/2000/svg'
          fill='none'
          viewBox='0 0 6 10'
        >
          <path
            stroke='currentColor'
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='m1 9 4-4-4-4'></path>
        </svg>
        <span class='sr-only'>Next</span>
      </span>
    </button>
  </div>
</div>

  <div class="flex flex-[3] px-10 max-sm:p-0 flex-col gap-4">
    <h3 class="font-bold text-4xl text-center max-sm:text-2xl">{product.name}</h3>
    <p class="text-xl text-justify">{product.description}</p>
  </div>
</div>


<script>

  const imageContainers = document.querySelectorAll('div.image-conatiner')

  imageContainers.forEach(container=>{ 
    const image = container.querySelector('img')
    if(image){
    (container as HTMLElement).addEventListener('mousemove',(e)=>{
      const rects = container.getBoundingClientRect()


      const x = (Math.ceil((e.clientX-rects.x)*100/rects.width))+16.5
      const y = (Math.ceil((e.clientY-rects.y)*100/rects.height))+16.5
      
      console.log(x, y)

      
      image.style.transform = 'scale(4)'
      image.style.transformOrigin = `${x}% ${y}%`     
    })
  }
    
  })

  imageContainers.forEach(container=>{ 
    const image = container.querySelector('img')
    if(image){
    (container as HTMLElement).addEventListener('mouseleave',(e)=>{
      image.style.transform = ''
      image.style.transformOrigin = ''
    })
  }
    
  })

</script>